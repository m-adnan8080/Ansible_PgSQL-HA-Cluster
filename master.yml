---

- name: Check if database is already initialized
  stat:
    path: '/var/lib/pgsql/12/data/PG_VERSION'
  register: init_status

- name: Initialize the PostgreSQL database
  shell: "/usr/pgsql-12/bin/postgresql-12-setup initdb"
  when: inventory_hostname in groups['dbmaster'] and init_status.stat.exists == False
  notify: Restart database

- name: Flush handler
  meta: flush_handlers

- name: Enable replication user to login
  become: true
  become_user: postgres
  blockinfile:
    path: /var/lib/pgsql/12/data/pg_hba.conf
    block: |
      {% for host in groups['db_hosts'] %}
      host    replication     repmgr     {{ hostvars[host]['ansible_facts']['eth1']['ipv4']['address'] }}/32    trust
      host    repmgr          repmgr     {{ hostvars[host]['ansible_facts']['eth1']['ipv4']['address'] }}/32    trust
      {% endfor %}
      host    all             all        0.0.0.0/0    md5
  register: pghba_config

- name: Create archive directory
  file:
    path: /var/lib/pgsql/12/data/archive
    state: directory
    owner: postgres
    group: postgres
    mode: 0700

- name: Start and enable PostgreSQL service on boot
  systemd:
    name: postgresql-12.service
    state: started
    enabled: yes

- name: Configure DBs to listen on ip address
  postgresql_set:
    name: listen_addresses
    value: '*'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Configure wal_level parameter
  postgresql_set:
    name: wal_level
    value: 'replica'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Configure repmgr shared libraries parameter
  postgresql_set:
    name: shared_preload_libraries
    value: 'repmgr'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Configure wal_log_hints parameter
  postgresql_set:
    name: wal_log_hints
    value: 'on'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Configure max_wal_senders parameter
  postgresql_set:
    name: max_wal_senders
    value: '10'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Configure wal_keep_segments parameter
  postgresql_set:
    name: wal_keep_segments
    value: '8'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Configure hot_standby parameter
  postgresql_set:
    name: hot_standby
    value: 'on'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Configure archive_mode parameter
  postgresql_set:
    name: archive_mode
    value: 'on'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Configure archive_command parameter
  postgresql_set:
    name: archive_command
    value: 'cp -i %p /var/lib/pgsql/12/data/archive/%f'
  register: postgresql_config
  become: true
  become_user: postgres

- name: Restart PostgreSQL to apply config changes
  systemd:
    name: postgresql-12.service
    state: restarted
  changed_when: False

- name: Create repmgr user in PostgreSQL
  postgresql_user:
    name: repmgr
    role_attr_flags: REPLICATION,CREATEDB,CREATEROLE,SUPERUSER
  become: true
  become_user: postgres

- name: Create repmgr database owner repmgr in PostgreSQL
  postgresql_db:
    name: repmgr
    owner: repmgr
    state: present
  become: true
  become_user: postgres

- name: Alter repmgr user and set search path
  command: psql -c 'ALTER USER repmgr SET search_path TO repmgr, public;'
  become: true
  become_user: postgres
  changed_when: False

- name: Check if repmgr is started
  stat:
    path: '/run/repmgr/repmgrd-12.pid'
  register: repmgr_status

- name: Register Master in repmgr
  command: /usr/pgsql-12/bin/repmgr primary register -F
  become: true
  become_user: postgres
  when: repmgr_status.stat.exists == False
  changed_when: False

- name: Start repmgr service
  systemd:
    name: repmgr12.service
    state: restarted
    enabled: yes
  changed_when: False

- name: Check repmgr daemon status
  command: /usr/pgsql-12/bin/repmgr daemon status
  become: true
  become_user: postgres
  register: repmgr_status
  when: repmgr_status.stat.exists == True
  changed_when: False

- debug:
    var: repmgr_status.stdout
  changed_when: False
