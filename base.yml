- name: Add the inventory into /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{% set short_name = item.split('.') %}{{ hostvars[item]['ansible_facts']['eth1']['ipv4']['address'] }} {{item}} {{ short_name[0] }}"
    state: present
  with_items:
    - "{{ groups['all'] }}"
  when: hostvars[item]['ansible_facts']['eth1']['ipv4']['address'] is defined

- name: Import PostgreSQL key from a url
  rpm_key:
    state: present
    key: https://ftp.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG

- name: Install PostgreSQL 12 repo
  package:
    name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    state: present

- name: Install PostgreSQL 12 and repmgr packages
  package:
    name:
      - net-tools
      - nano
      - postgresql12
      - postgresql12-contrib
      - postgresql12-server
      - python-psycopg2
      - repmgr12
    state: present
  when: inventory_hostname in groups['all']

- name: Install PgBouncer package
  package:
    name:
      - pgbouncer
    state: present
  when: inventory_hostname in groups['watcher']

- name: Copy Env files to postgres user
  copy:
    src: '{{ item }}'
    dest: /var/lib/pgsql
    owner: postgres
    group: postgres
    mode: 0644
  with_items:
    - .bashrc
    - .bash_profile
  when: inventory_hostname in groups['all']

- name: Create ssh directory for postgres user
  file:
    path: /var/lib/pgsql/.ssh
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  when: inventory_hostname in groups['all']

- name: Copy ssh private and public files to postgres user
  copy:
    src: '{{ item }}'
    dest: /var/lib/pgsql/.ssh
    owner: postgres
    group: postgres
    mode: 0600
  with_items:
    - id_ed25519
    - id_ed25519.pub
    - config
    - authorized_keys
  when: inventory_hostname in groups['all']

- name: Create repmgr conf file
  blockinfile:
    path: /etc/repmgr/12/repmgr.conf
    block: |
      #############################
        node_id={{ node_id }}
        node_name={{ ansible_facts['hostname'] }}
        conninfo='host={{ ansible_facts['eth1']['ipv4']['address'] }} dbname=repmgr user=repmgr'

        data_directory='/var/lib/pgsql/12/data'
        config_directory='/var/lib/pgsql/12/data'
        log_file='/var/log/repmgr/repmgr.log'

        repmgrd_service_start_command = 'sudo systemctl start repmgr12.service'
        repmgrd_service_stop_command = 'sudo systemctl stop repmgr12.service'
        service_start_command='sudo /usr/bin/systemctl start postgresql-12.service'
        service_stop_command='sudo /usr/bin/systemctl stop postgresql-12.service'
        service_restart_command='sudo /usr/bin/systemctl restart postgresql-12.service'
        service_reload_command='sudo /usr/bin/systemctl reload postgresql-12.service'

        # promote_command='repmgr standby promote -f /etc/repmgr/12/repmgr.conf --siblings-follow --log-to-file'
        promote_command='repmgr standby promote -f /etc/repmgr/12/repmgr.conf --log-to-file'
        follow_command='repmgr standby follow -f /etc/repmgr/12/repmgr.conf --log-to-file --upstream-node-id=%n'
        failover=automatic

        reconnect_attempts=3
        reconnect_interval=5
        ssh_options='-q -o StrictHostKeyChecking=no -o ConnectTimeout=10'
      #############################
    owner: postgres
    group: postgres
  when: inventory_hostname in groups['all']

- name: Create repmgr pid directory
  file:
    path: /run/repmgr
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  when: inventory_hostname in groups['all']

- name: Add PostgreSQL to sudo group to start/stop PostgreSQL service without password
  copy:
    dest: /etc/sudoers.d/postgres
    content: |
      postgres ALL = NOPASSWD: /usr/bin/systemctl stop postgresql-12.service, /usr/bin/systemctl start postgresql-12.service, /usr/bin/systemctl restart postgresql-12.service, /usr/bin/systemctl reload postgresql-12.service, /usr/bin/systemctl start repmgr12.service, /usr/bin/systemctl stop repmgr12.service, /usr/bin/systemctl reload repmgr12.service
  when: inventory_hostname in groups['all']
  changed_when: False


